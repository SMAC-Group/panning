?sum
?glm
library("nnet", lib.loc="~/R/win-library/3.2")
library(panning)
library(panning)
library(panning)
?predict
?sum
library(panning)
?glm
library(panning)
library(panning)
?glm
library(panning)
?CVmFold
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
?set.seed
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
devtools::use_vignette('panning')
devtools::use_vignette('panning')
devtools::use_vignette('panning')
getwd()
library(panning)
getwd()
setwd('C:/Users/OrSoS/Dropbox/PhD/rpackage/panning')
devtools::use_vignette('panning')
library(panning)
?predict
?foreach
require(doParallel)
?foreach
?%dopar%
?%dorng%
library(panning)
library(panning)
library(panning)
library(panning)
CVmFold
beta <- c(1,0,1,0,1,0,1,0,1,0,1,0,1)
beta
beta <- c(1,0,2,0,3,0,4,0,5,0,6,0,7,0)
set.seed(123)
p <- length(beta)
X <- matrix(rnorm((p-1)*50), nrow=50, ncol=(p-1))
X <- tcrossprod(X, diag(p-1))
X1 <- cbind(1, X)
x1beta <- drop(tcrossprod(Betas, X1))
pr <- 1/(1+exp(-x1beta))
y <- rbinom(50,1,pr)
beta <- c(1,0,2,0,3,0,4,0,5,0,6,0,7,0)
set.seed(123)
p <- length(beta)
X <- matrix(rnorm((p-1)*50), nrow=50, ncol=(p-1))
X <- tcrossprod(X, diag(p-1))
X1 <- cbind(1, X)
x1beta <- drop(tcrossprod(beta, X1))
pr <- 1/(1+exp(-x1beta))
y <- rbinom(50,1,pr)
beta <- c(1,0,2,0,3,0,4,0,5,0,6,0,7,0)
set.seed(123)
p <- length(beta)
X <- matrix(rnorm((p-1)*50), nrow=50, ncol=(p-1))
X <- tcrossprod(X, diag(p-1))
y <- rbinom(50,1,1/(1+exp(-tcrossprod(beta, cbind(1, X)))))
X
y
library(panning)
library(panning)
library(panning)
library(panning)
require(panning)
require(panning)
?glm
?family
?predict
mod <- glm(y,X, family=binomial)
mod <- glm(y~X, family=binomial)
mod
predict(mod)
predict(mod, type = 'probs')
predict(mod, type = 'link')
predict(mod, type = 'response')
predict(mod, type = 'terms')
?predict.multinom
CVmFold(y = y, X = X, family = binomial(link = "logit"), divergence = "L1", type = "response" )
CVmFold(y = y, X = X, family = binomial(link = "logit"), divergence = "classification", type = "response" )
warnings()
beta <- c(1,0,2,0,3,0,4,0,5,0,6,0,7,0)
set.seed(123)
p <- length(beta)
X <- matrix(rnorm((p-1)*100), nrow=100, ncol=(p-1))
X <- tcrossprod(X, diag(p-1))
y <- rbinom(100,1,1/(1+exp(-tcrossprod(beta, cbind(1, X)))))
CVmFold(y = y, X = X, family = binomial(link = "logit"), divergence = "L1", type = "response" )
warnings()
?glm
clotting <- data.frame(
u = c(5,10,15,20,30,40,60,80,100),
lot1 = c(118,58,42,35,27,25,21,19,18),
lot2 = c(69,35,26,21,18,16,13,12,12))
counts <- c(18,17,15,20,10,20,25,13,12)
outcome <- gl(3,1,9)
treatment <- gl(3,3)
print(d.AD <- data.frame(treatment, outcome, counts))
CVmFold(y = counts, X = data.frame(outcome, treatment), family = poisson(), divergence = "L1", type = "response" )
data.frame(outcome, treatment)
cbind(outcome, treatment)
CVmFold(y = counts, X = cbind(outcome, treatment), family = poisson(), divergence = "L1", type = "response" )
CVmFold(y = counts, X = cbind(outcome, treatment), family = poisson(), divergence = "L1" )
CVmFold(y = counts, X = cbind(outcome, treatment), m = 2, K = 30, family = poisson(), divergence = "L1" )
CVmFold(y = counts, X = cbind(outcome, treatment), m = 2, K = 30, family = poisson(), divergence = "L1" )
CVmFold(y = counts, X = cbind(outcome, treatment), m = 3, K = 30, family = poisson(), divergence = "L1" )
n <- 30
beta <- c(1,0,2,0,3,0,4,0,5,0,6,0,7,0)
set.seed(123)
p <- length(beta)
X <- matrix(rnorm((p-1)*n), nrow=n, ncol=(p-1))
X <- tcrossprod(X, diag(p-1))
y <- rbinom(n,1,1/(1+exp(-tcrossprod(beta, cbind(1, X)))))
CVmFold(y = y, X = X, family = binomial(link = "logit"), divergence = "L1", type = "response" )
CVmFold(y = y, X = X, family = binomial(link = "logit"), divergence = "classification", type = "response" )
y[y==1]
y <- y+1
CVmFold(y = y, X = X, family = binomial(link = "logit"), divergence = "classification", type = "response" )
y
CVmFold(y = y, X = X, family = binomial(link = "logit"), divergence = "classification", type = "response" )
n <- 30
beta <- c(1,0,2,0,3,0,4,0,5,0,6,0,7,0)
set.seed(123)
p <- length(beta)
X <- matrix(rnorm((p-1)*n), nrow=n, ncol=(p-1))
y <- rbinom(n,1,1/(1+exp(-tcrossprod(beta, cbind(1, X)))))
CVmFold(y = y, X = X, family = binomial(link = "logit"), divergence = "L1", type = "response" )
CVmFold(y = y, X = X, family = binomial(), divergence = "L1", type = "response" )
warnings()
?glm
1/(1+exp(-tcrossprod(beta, cbind(1, X))))
n <- 30
beta <- c(1,0,0.9,0,0.8,0,0.7,0,0.6,0,0.5,0,0.4,0)
set.seed(123)
p <- length(beta)
X <- matrix(rnorm((p-1)*n), nrow=n, ncol=(p-1))
1/(1+exp(-tcrossprod(beta, cbind(1, X))))
y <- rbinom(n,1,1/(1+exp(-tcrossprod(beta, cbind(1, X)))))
y
CVmFold(y = y, X = X, family = binomial(), divergence = "L1", type = "response" )
warnings()
?glm.fit
n <- 30
beta <- c(1,0,0.9,0,0.8,0,0.7,0,0.6,0,0.5,0,0,0,0,0)
set.seed(123)
p <- length(beta)
X <- matrix(rnorm((p-1)*n), nrow=n, ncol=(p-1))
y <- rbinom(n,1,1/(1+exp(-tcrossprod(beta, cbind(1, X)))))
y
1/(1+exp(-tcrossprod(beta, cbind(1, X))))
CVmFold(y = y, X = X, family = binomial(), divergence = "L1", type = "response" )
CVmFold(y = y, X = X, family = binomial(), divergence = "L1", type = "response", list(maxit=1000) )
CVmFold(y = y, X = X, family = binomial(), divergence = "L1", type = "response", control = list(maxit=1000) )
warnings()
CVmFold(y = y, X = X, family = binomial(), divergence = "L1", type = "response", control = list(maxit=100) )
warnings()
matrix(c(1,0,0,2),2,2)
Weight <- matrix(c(0,1,2,0),2,2)
Weight
y
y <- y+1
CVmFold(y = y, X = X, family = binomial(link = "logit"), divergence = "classification", type = "response" )
CVmFold(y = y, X = X, family = "multinomial", divergence = "classification", type = "response" )
CVmFold(y = y, X = X, family = "multinomial", divergence = "classification", type = "class" )
CVmFold(y = y, X = X, family = "multinomial", divergence = "classification", W = Weight, type = "class" )
y
?multinom
library(MASS)
example(birthwt)
bwt
data("birthwt")
rm(list=ls())
library(MASS)
data("birthwt")
birthwt
str(birthwt)
matrix(birthwt[-1,],189,9)
str(birthwt)
cbind(birthwt)
as.matrix(birthwt)
as.matrix(birthwt)[-1,]
as.matrix(birthwt)[,-1]
y <- birthwt$low
x <- as.matrix(birthwt)[,-1]
y <- birthwt$low
X <- as.matrix(birthwt)[,-1]
CVmFold(y = y, X = X, family = binomial(), divergence = "L1", type = "response", control = list(maxit=100) )
CVmFold(y = y, X = X, family = binomial(link = 'logit'), divergence = "L1", type = "response", control = list(maxit=100) )
CVmFold(y = y, X = X, family = binomial(link = 'logit'), divergence = "L1", type = "response", control = list(maxit=100) )
set.seed(123)
CVmFold(y = y, X = X, family = binomial(link = 'logit'), divergence = "L1", type = "response", control = list(maxit=100) )
set.seed(123)
CVmFold(y = y, X = X, family = binomial(link = 'logit'), divergence = "L1", type = "response", control = list(maxit=100) )
set.seed(123)
CVmFold(y = y, X = X, family = "multinomial", divergence = "classification", type = "class" )
set.seed(123)
CVmFold(y = y, X = X, family = binomial(link = 'logit'), divergence = "L1", type = "response", control = list(maxit=100) )
set.seed(123)
CVmFold(y = y, X = X, family = "multinomial", divergence = "classification", type = "class" )
y
mod <- glm(y~X, family=binomial())
mod
predict(mod)
predict(mod, type='response')
library(panning)
library(panning)
rm(list=ls())
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(MASS)
data("birthwt")
y <- birthwt$low
X <- as.matrix(birthwt)[,-1]
set.seed(123)
CVmFold(y = y, X = X, family = binomial(link = 'logit'), divergence = "L1", type = "response", control = list(maxit=100) )
set.seed(123)
CVmFold(y = y, X = X, family = "multinomial", divergence = "classification", type = "class" )
family = binomial(link = 'logit')
divergence = "L1"
type = "response"
control = list(maxit=100)
m = 10L
K = 10L
C0 = 0.5
n <- length(y)          # number of observations
nc <- ceiling(n/m)      # number of columns for m-fold-CV, m is number of rows
ne <- nc*m - n          # number of extra observations needed for full matrix in m-fold-CV
pred.error <- matrix(nr=m,nc=K) # matrix of prediction errors
imX <- is.matrix(X)
imX
ne
if( ne == 0) rs <- matrix(sample.int( n, replace = FALSE ), nr=m, nc=nc) else
rs <- matrix(c(sample.int( n, replace = FALSE ), rep(NA,ne)), nr=m, nc=nc)
rs
i=1
i.test <- na.omit(rs[i,])
i.train <- na.omit(c(rs[-i,]))
y.cv.train <- y[i.train]
y.cv.test <- y[i.test]
if(imX) X.cv.train <- X[i.train,]       else X.cv.train <- X[i.train]
if(imX) X.cv.test <- X[i.test,]         else X.cv.test <- X[i.test]
if( !is.list(family) ){
fit <- multinom(y ~ ., data = data.frame(y=y.cv.train, var=X.cv.train),
trace = FALSE, ... ) }else{
fit <- glm(y ~ ., data = data.frame(y=y.cv.train, var=X.cv.train),
family = family, ...)
}
if( !is.list(family) ){
fit <- multinom(y ~ ., data = data.frame(y=y.cv.train, var=X.cv.train),
trace = FALSE ) }else{
fit <- glm(y ~ ., data = data.frame(y=y.cv.train, var=X.cv.train),
family = family)
}
fit
y.hat <- predict(fit, newdata = data.frame(var=X.cv.test), type = type)
y.hat
if( is.null(W) ) W <- matrix(1,n,n) - diag(n)
W=NULL
if( is.null(W) ) W <- matrix(1,n,n) - diag(n)
if( is.list(family) && family$family == "binomial" ) y.hat <- ceiling(y.hat - C0)
y.hat
y.all <- c(y.hat, y.cv.test)
y.all
nf <- length(unique(y.all))
nf
y.all <- factor(y.all, labels = seq_len(nf))
y.all
W[matrix(y.all,nc=2)]
matrix(y.all,nc=2)
y.all
matrix(y.all,nc=2)
matrix(as.integer(y.all),nc=2)
library(panning)
rm(list=ls())
library(panning)
library(MASS)
data("birthwt")
y <- birthwt$low
X <- as.matrix(birthwt)[,-1]
set.seed(123)
CVmFold(y = y, X = X, family = binomial(link = 'logit'), divergence = "L1", type = "response", control = list(maxit=100) )
set.seed(123)
CVmFold(y = y, X = X, family = "multinomial", divergence = "classification", type = "class" )
set.seed(123)
CVmFold(y = y, X = X, family = binomial(link = 'logit'), divergence = "classification", control = list(maxit=100) )
set.seed(123)
CVmFold(y = y, X = X, family = "multinomial", divergence = "classification", type = "class" )
CVmFold(y = y, X = X, family = "multinomial", divergence = "classification", type = "class" )
CVmFold(y = y, X = X, family = binomial(link = 'logit'), divergence = "L1", control = list(maxit=100) )
CVmFold(y = y, X = X, family = binomial(link = 'logit'), divergence = "classification", control = list(maxit=100) )
counts <- c(18,17,15,20,10,20,25,13,12)
outcome <- gl(3,1,9)
treatment <- gl(3,3)
CVmFold(y = counts, X = cbind(outcome, treatment), m = 3, K = 30, family = poisson(), divergence = "L1" )
CVmFold(y = counts, X = cbind(outcome, treatment), m = 3, K = 30, family = poisson(), divergence = "L1" )
CVmFold(y = y, X = X, family = "multinomial", divergence = "classification", type = "class" )
CVmFold(y = counts, X = cbind(outcome, treatment), m = 3, K = 30, family = poisson(), divergence = "L1" )
CVmFold(y = y, X = X, family = "multinomial", divergence = "classification", type = "class" )
library(panning)
library(panning)
library(panning)
library(panning)
library(panning)
library(MASS)
data("birthwt")
y <- birthwt$low
X <- as.matrix(birthwt)[,-1]
set.seed(123)
CVmFold(y = y, X = X, family = binomial(link = 'logit'), divergence = "sq.error",
type = "response", trace = FALSE, control = list(maxit=100) )
set.seed(123)
CVmFold(y = y, X = X, family = binomial(link = 'logit'), divergence = "L1",
type = "response", trace = FALSE, control = list(maxit=100) )
n <- 30
beta <- rep(c(1,0),10)
set.seed(123)
p <- length(beta)
X <- matrix(rnorm((p-1)*n), nrow=n, ncol=(p-1))
y <- rbinom(n,1,1/(1+exp(-tcrossprod(beta, cbind(1, X)))))
y
X
InitialStep(y = y, X = X, family = binomial, type = "response", divergence = "classification", proc = 2, trace = FALSE)
?makeCluster
library(panning)
InitialStep(y = y, X = X, family = binomial, type = "response", divergence = "classification", proc = 2, trace = FALSE)
?%dopar%
library(panning)
InitialStep(y = y, X = X, family = binomial, type = "response", divergence = "classification", proc = 2, trace = FALSE)
library(panning)
InitialStep(y = y, X = X, family = binomial, type = "response", divergence = "classification", proc = 2, trace = FALSE)
binomial
InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response", divergence = "classification", proc = 2, trace = FALSE)
IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response", divergence = "classification", proc = 2, trace = FALSE)
IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response", divergence = "classification", proc = 4♦, trace = FALSE)
IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response", divergence = "classification", proc = 4, trace = FALSE)
cl <- makeCluster(4)
.05*19
.10*19
.15*19
n <- 30
beta <- rep(c(1,0),30)
set.seed(123)
p <- length(beta)
X <- matrix(rnorm((p-1)*n), nrow=n, ncol=(p-1))
y <- rbinom(n,1,1/(1+exp(-tcrossprod(beta, cbind(1, X)))))
beta <- rep(c(1,0),20)
n <- 30
beta <- rep(c(1,0),20)
set.seed(123)
p <- length(beta)
X <- matrix(rnorm((p-1)*n), nrow=n, ncol=(p-1))
y <- rbinom(n,1,1/(1+exp(-tcrossprod(beta, cbind(1, X)))))
IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response", divergence = "classification", proc = 2, trace = FALSE)
IStep
beta
beta[14]
beta[34]
IStep$Ids
IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), seed = 123,
type = "response", divergence = "classification", proc = 2, trace = FALSE)
IStep
beta <- rpois(40, lambda = 3)
beta
beta <- rpois(40, lambda = 2)
beta
n <- 30
set.seed(123)
beta <- rpois(40, lambda = 2)
beta
p <- length(beta)
X <- matrix(rnorm((p-1)*n), nrow=n, ncol=(p-1))
y <- rbinom(n,1,1/(1+exp(-tcrossprod(beta, cbind(1, X)))))
IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), seed = 123,
type = "response", divergence = "classification", proc = 2, trace = FALSE)
IStep
beta[30]
beta[38]
beta
choose(2,39)
choose(39,2)
GStep <- GeneralStep(y = y, X = X, Id_1s = c(30,38), d = 2, B = 50, family = binomial(link = "logit"),
type = "response", divergence = "classification", proc = 4, trace = FALSE)
library(panning)
IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response",
divergence = "classification", proc = 4, trace = FALSE)
IStep
GStep <- GeneralStep(y = y, X = X, Id_1s = c(30,38), d = 2, B = 50, family = binomial(link = "logit"),
type = "response", divergence = "classification", proc = 4, trace = FALSE)
GStep
library(panning)
IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response",
divergence = "classification", proc = 4, trace = FALSE)
IStep
GStep <- GeneralStep(y = y, X = X, Id_1s = c(30,38), d = 2, B = 50, family = binomial(link = "logit"),
type = "response", divergence = "classification", proc = 4, trace = FALSE)
GStep
n <- 30
set.seed(123)
beta <- rpois(40, lambda = 0.5)
beta
n <- 30
set.seed(123)
beta <- c(1, rpois(40, lambda = 0.5))
p <- length(beta)
X <- matrix(rnorm((p-1)*n), nrow=n, ncol=(p-1))
y <- rbinom(n,1,1/(1+exp(-tcrossprod(beta, cbind(1, X)))))
beta
IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response",
divergence = "classification", proc = 4, trace = FALSE)
IStep
beta[13]
beta[26]
n <- 50
set.seed(123)
beta <- c(1, rpois(40, lambda = 0.5))
p <- length(beta)
X <- matrix(rnorm((p-1)*n), nrow=n, ncol=(p-1))
y <- rbinom(n,1,1/(1+exp(-tcrossprod(beta, cbind(1, X)))))
IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response",
divergence = "classification", proc = 4, trace = FALSE)
IStep$Ids
beta[24]
beta[33]
beta
GStep <- GeneralStep(y = y, X = X, Id_1s = c(24,33), d = 2, B = 50, family = binomial(link = "logit"),
type = "response", divergence = "classification", proc = 4, trace = FALSE)
library(panning)
IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response",
divergence = "classification", proc = 4, trace = FALSE)
IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response",
divergence = "classification", proc = 4, trace = FALSE)
IStep
GStep <- GeneralStep(y = y, X = X, Id_1s = c(24,33), d = 2, B = 50, family = binomial(link = "logit"),
type = "response", divergence = "classification", proc = 4, trace = FALSE)
GStep
library(panning)
library(panning)
library(panning)
library(panning)
n <- 50
set.seed(123)
beta <- c(1, rpois(40, lambda = 0.5))
p <- length(beta)
X <- matrix(rnorm((p-1)*n), nrow=n, ncol=(p-1))
y <- rbinom(n,1,1/(1+exp(-tcrossprod(beta, cbind(1, X)))))
IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response",
divergence = "classification", proc = 4, trace = FALSE)
library(panning)
library(panning)
n <- 50
set.seed(123)
beta <- c(1, rpois(40, lambda = 0.5))
p <- length(beta)
X <- matrix(rnorm((p-1)*n), nrow=n, ncol=(p-1))
y <- rbinom(n,1,1/(1+exp(-tcrossprod(beta, cbind(1, X)))))
IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response",
divergence = "classification", proc = 4, trace = FALSE)
library(panning)
library(panning)
n <- 50
set.seed(123)
beta <- c(1, rpois(40, lambda = 0.5))
p <- length(beta)
X <- matrix(rnorm((p-1)*n), nrow=n, ncol=(p-1))
y <- rbinom(n,1,1/(1+exp(-tcrossprod(beta, cbind(1, X)))))
IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response",
divergence = "classification", proc = 4, trace = FALSE)
IStep
library(panning)
IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response",
divergence = "classification", trace = FALSE)
system.time(IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response",
divergence = "classification", trace = FALSE))
system.time(IStep <- InitialStep(y = y, X = X, family = binomial(link = "logit"), type = "response",
divergence = "classification", proc= 4, trace = FALSE))
library(panning)
library(panning)
